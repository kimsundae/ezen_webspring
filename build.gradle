

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

dependencies { // 외부 라이브러리 추가하는 곳 => 자동으로 해당 라이브러리 다운로드 받고 프로젝트에 빌드
    implementation 'org.springframework.boot:spring-boot-starter-web' // springboot web
    runtimeOnly 'com.mysql:mysql-connector-j'                           // mysql 라이브러리
    compileOnly 'org.projectlombok:lombok'                              // 롬복 라이브러리
    annotationProcessor 'org.projectlombok:lombok'                      // 롬복 라이브러리
    // 추가로 인텔리제이 플러그인 설치
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-security' // spring security 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // 2 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    //developmentOnly 'org.springframework.boot:spring-boot-devtools' // 자동빌드
}

tasks.named('test') {
    useJUnitPlatform()
}
//--------------- 리액트(빌드) 통합 ------------------- //
// *. 터미널에서 리액트 실행하지 않고 gradle이 리액트를 빌드해서 빌드된 파일을 스프링쪽으로 이동
// 1. 리액트 코드파일이 있는 리액트 프로젝트 폴더 경로
def frontendDir  = "$projectDir/src/main/reactapp"; //$projectDir/src/main/{리액트프로젝트명}
// $projectDir : 현재 build.gradle 프로젝트의 위치
// 2. 리액트
sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

// 3. 이동[ 원본 이동x, 복사 이동O ]
processResources { dependsOn "copyReactBuildFiles" }

// 4. [1] 리액트 설치 [ 리액트 라이브러리 없으면 npm update ]
    task installReact( type : Exec ){
    //    dependOn "installReact"
        workingDir "$frontendDir" // 리액트코드가 있는 폴더경로
        inputs.dir "$frontendDir" // 빌드했을 때 저장할 폴더경로
        group = BasePlugin.BUILD_GROUP
        // npm 호출
            // 1. 운영체제가 window 환경 이면
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            commandLine "npm.cmd", "audit", "fix"
            commandLine 'npm.cmd', 'install' }
        else {//운영체제가 아니라면
            commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
        }

    }

// 5. [2] 리액트 빌드
task buildReact( type : Exec ){
    dependsOn "installReact"
    workingDir "$frontendDir" // 리액트코드가 있는 폴더경로
    inputs.dir "$frontendDir" // 빌드했을 때 저장할 폴더경로
    group = BasePlugin.BUILD_GROUP
    // npm 호출
    // 1. 운영체제가 window 환경 이면
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }

}
// 6. [3] 리액트 빌드파일 복사
task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}