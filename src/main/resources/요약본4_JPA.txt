----

    패러다임(=방식/체계/규정 틀)
    ORM( = Object Relational Mapping ) : 객체 관계 매핑
        - 객체 지향 프로그래밍            : 객체들간의 상호작용을 통한 프로그래밍
        - 관계형 데이터베이스             : 열/행의 테이블/관계로 데이터를 저장하는 방식
        + 관계형 데이터베이스를 객체지향으로 매핑 사용
    JPA : JAVA Persistence api         : ORM 패러다임으로 만들어진 라이브러리

    엔티티클래스 = 테이블
    엔티티(객체) = 레코드
    -----

----

1.그레이들에 의존성 추가
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 라이브러리
        - 스프링 실행시 DB연동
        - 경로 오류 [ 1. 경로 세팅 안함 2. 경로에 오타 등 ]
            Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.

2. JPA 옵션 세팅

    # spring.datasource.driverClassName = DBMS 드라이버 이름[ 각 회사마다 상이 ]
    # spring.datasource.driverClassName = 연동할 데이터베이스 경로
    # spring.datasource.username = 계정 명
    # spring.datasource.username = DB계정 패스워드

3. 엔티티(객체)
    1. 엔티티 생성 시 필수
        1. @Entity : 클래스 상단에 주입
        2. @ID
            No identifier specified for entity: example.day06.NoteEntity
    2. 필드 선언 [ MYSQL 과 JAVA 타입 변환 ]
스 ]
    - JPARepository
        * 기본적인 CRUD 해당하는 SQL 지원
        * 선언 방법
4. 엔티티 조작 [ 인터페이
            1. 인터페이스 생성
            2. @Repository
            3. public interface 인터페이스명 extends JpaRepository<조작할엔티티클래스명 , 해당엔티티PK필드자료형 >
                - 조작할 때 PK필드로 식별하므로 각 엔티티별 PK필드(@ID)는 필수
5. 엔티티 인터페이스 사용처 [ 서비스에서만 사용 (각 MVC별 역할분담)  ]
    1. CRUD
        1. insert
            인터페이스명.save( 저장할 엔티티 )
            반환타입 : 생성된 엔티티 반환
        2. select
            1.
            인터페이스명.findAll()
            반환타입 : 검색된 엔티티 여러개 List<Entity>
            2.
            인터페이스명.findById( pk번호 )
            반환타입 : 검색된 엔티티 1개 optional<TodoEntity>
                Optional 클래스 : null 관련 메소드 제공 [ nullPointerException 안전성 보장 ]
                - nullPointerException : 객체가 null일 때 발생하는 오류
                1. isPresent()


        3. delete
            1.
            인터페이스명.delete( 삭제할엔티티객체 )
            반환타입 : void
            2.
            인터페이스명.deleteById( 삭제할pk번호 )
            반환타입 : void

        4. update
            엔티티객체명.set필드명( 새로운값 )
            @Transactinal 필수

- 트랜잭션
    - 하나/여럿 작업들을 묶어서 최소단위 업무처리
    - COMMIT : 최종완료 [ 마지막 commit 이후부터 현재 완료까지 ] -> SQL 결과 적용
    - Rollback : 뒤로가기/취소 [ 마지막 commit ]

        ---> 성공 ---> 부분완료 --COMMIT--> 완료
                        |
    활용(실행 : SQL n개)  |
                        |
        ---> 오류 ---> 실패  -- Rollback --> 철회

- JPA Auditing [ Auditing = 감사, 감지 ]
    - Entity 생성/변화에 따른 감지
    1. @EnableJpaAuditing   : JPA 엔티티 감지기능 실행 / 스프링부트 시작 클래스와 같이 주입
    2. @MappedSuperclass    : 엔티티에게 상속주는 클래스일 경우[ 서로 다른 엔티티간의 공통 필드 묶을 때 ]
                            + 일반 상속[ 기본 자바 ]는 @메타 어노테이션 상속불가능
                            @MappedSuperclass : 매핑 필드[ @CreateDate, @LastModifiedDate ]까지
    3. @EntityListeners( AuditingEntityListener.class ) 해당 필드를 사용하는 엔티티 감지 적용
    4. @CreatedDate     : 엔티티 생성날짜/시간 주입