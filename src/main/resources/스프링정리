    - 스프링 : 자바 프레임워크
        - 프레임워크 : 여러 기능을 가진 클래스와 라이브러리가 합쳐진 형태/틀

    - 스프링 셋팅
        - 인텔리제이 무료버전(커뮤니티) 스프링프로젝트 지원 안함

        - 수업기준 : 그레이들 프로젝트
            - 그레이들[ 자동(라이브러리) 빌드 ]

        - 그레이들에 빌드할 의존성(라이브러리) 추가 [ https://start.spring.io/ ]
        - Gradle - Groovy
        Java
            Spring boot[ 2.7.16 ]
        Java8
    - Dependencies
        Spring Web      : 스프링 웹 관련 라이브러리
        Lombok          : 롬복 [ 생성자,getter,setter,빌더패턴 등등 ] 라이브러리
        MySQL Driver    : mysql 연동 라이브러리
        < 추후에 지속적으로 추가 >

    - build.gradle에 dependencies 추가

- 프로젝트 폴더구성
    프로젝트명
        .gradle : build.gradle 빌드 파일 [ 임시파일 ]
        .idea   : 인텔리제이 셋팅 파일 [ 임시파일 ]
        build   : JVM 빌드 시 생성한 바이트파일 [ 임시파일 ]
        gradle  : gradle 라이브러리 파일
        ****src : 개발자 코드 작성하는 공간
            main
                    java        : 백엔드
                    resources   : 프론트엔드[정적파일(html,css,js,img 등등)]
        ****build.gradle : 라이브러리 자동 빌드 해주는 작성 코드 파일

- 스프링부트 실행
        준비물
        - main 함수 1개 필요 [ 스프링을 작동할 스레드 1개 필요 ]
        1. 클래스 1개 생성 [ 스프링 실행하는 클래스이므로 모든 소스파일의 최상위 위치 ]
        2. 클래스 상단
                @SpringBootApplication 주입
        3. main 선언
                SpringApplication.run( 현재클래스명.class );

        - MVC 3티어
            - 레이어 : 구역
            - DTO,VO,ENTITY
            프레젠테이션 레이어
                VIEW, CONTROLLER
            서비스 레이어
                SERVICE
            리포지토리 레이어
                REPOSITORY

- 어노테이션
1. 스프링
    @SpringBootApplication      스프링부트 실행 관련 제공
    @ServletComponentScan       서블릿을 찾아서 컨테이너에 빈 등록
    @Autowired                  컨테이너에서 빈 찾아서 객체 주입
2. MVC
    @Controller                 해당 클래스를 controller 사용 주입 [ 컨테이너에 빈 등록 ]
    @RestController             해당 클래스를 controller 사용 주입 [ 컨테이너에 빈 등록 ] + @ResponseBody
    @ResponseBody               해당 Mapping 함수들의 response 반환 타입을 자동으로 설정
    @RequestMapping             해당 함수/클래스를 매핑
    @GetMapping                 HTTP 요청 GET 함수 매핑
    @PostMapping                HTTP 요청 Post 함수 매핑
    @PutMapping                 HTTP 요청 Put 함수 매핑
    @DeleteMapping              HTTP 요청 Delete 함수 매핑
    @Service                    해당 클래스를 service 사용 주입 [ 컨테이너에 빈 등록 ]
    @Component                  해당 클래스 컨테이너에 빈 등록
        @RequestParam           쿼리스트링 형식의 요청 매개변수 매핑
        @RequestBody            HTTP body 형식의 요청 매개변수를 객체 매핑
        @ModelAttribute         쿼리스트링 형식의 요청 매개변수를 객체로 매핑
        @PathVariable           경로상의 매개변수 형식의 요청 매개변수 매핑    URL/값/값
3. lombok
    @NoArgsConstructor      // 빈생성자 자동 생성
    @AllArgsConstructor     // 풀 생성자 자동 생성
    @Getter                 // 필드의 getter메소드 자동 생성
    @Setter                 // 필드의 setter메소드 자동 생성
    @ToString               // 필드의 toString메소드 자동 생성
    @Builder                // 빌더 패턴[ 유연하게 객체 생성 도와주는 함수 제공 ]

4.JPA
----

    패러다임(=방식/체계/규정 틀)
    ORM( = Object Relational Mapping ) : 객체 관계 매핑
        - 객체 지향 프로그래밍            : 객체들간의 상호작용을 통한 프로그래밍
        - 관계형 데이터베이스             : 열/행의 테이블/관계로 데이터를 저장하는 방식
    JPA : JAVA Persistence api         : ORM 패러다임으로 만들어진 라이브러리

    엔티티클래스 = 테이블
    엔티티(객체) = 레코드
    -----

----

1.그레이들에 의존성 추가
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA 라이브러리
        - 스프링 실행시 DB연동
        - 경로 오류 [ 1. 경로 세팅 안함 2. 경로에 오타 등 ]
            Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.

2. JPA 옵션 세팅

    # spring.datasource.driverClassName = DBMS 드라이버 이름[ 각 회사마다 상이 ]
    # spring.datasource.driverClassName = 연동할 데이터베이스 경로
    # spring.datasource.username = 계정 명
    # spring.datasource.username = DB계정 패스워드

3. 엔티티(객체)
    1. 엔티티 생성 시 필수
        1. @Entity : 클래스 상단에 주입
        2. @ID
            No identifier specified for entity: example.day06.NoteEntity
    2. 필드 선언 [ MYSQL 과 JAVA 타입 변환 ]

4. 엔티티 조작 [ 인터페이스 ]
    - JPARepository
        * 기본적인 CRUD 해당하는 SQL 지원
        * 선언 방법
            1. 인터페이스 생성
            2. @Repository
            3. public interface 인터페이스명 extends JpaRepository<조작할엔티티클래스명 , 해당엔티티PK필드자료형 >
                - 조작할 때 PK필드로 식별하므로 각 엔티티별 PK필드(@ID)는 필수
5. 엔티티 인터페이스 사용처 [ 서비스에서만 사용 (각 MVC별 역할분담)  ]
    1. CRUD
        1. insert
            인터페이스명.save( 저장할 엔티티 )
            반환타입 : 생성된 엔티티 반환
        2. select
            1.
            인터페이스명.findAll()
            반환타입 : 검색된 엔티티 여러개 List<Entity>
            2.
            인터페이스명.findById( pk번호 )
            반환타입 : 검색된 엔티티 1개 optional<TodoEntity>
                Optional 클래스 : null 관련 메소드 제공 [ nullPointerException 안전성 보장 ]
                - nullPointerException : 객체가 null일 때 발생하는 오류
                1. isPresent()


        3. delete
            1.
            인터페이스명.delete( 삭제할엔티티객체 )
            반환타입 : void
            2.
            인터페이스명.deleteById( 삭제할pk번호 )
            반환타입 : void

        4. update
            엔티티객체명.set필드명( 새로운값 )
            @Transactinal 필수



